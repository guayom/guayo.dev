<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{{ title }}</title>
        <meta name="description" content="{{ description }}">
        <script src="//unpkg.com/alpinejs" defer></script>
        <link rel="stylesheet" href="/css/main.css">
        <script type="speculationrules">
            { "prefetch": [ {"source": "list", "urls": ["/", "/resume", "/blog"]} ] }
        </script>
    </head>
    <body x-data="stepCounter()">
        <header>
            <nav id="main-nav">
                <ul>
                    <li><a{% if active_menu_item=='home' %} class="active"{% endif %} href="/">home</a></li>
                    <li><a{% if active_menu_item=='resume' %} class="active"{% endif %} href="/resume/">resume</a></li>
                    <li><a{% if active_menu_item=='blog' %} class="active"{% endif %} href="/blog/">blog</a></li>
                </ul>
            </nav>
        </header>
        <main>
            {{ content | safe }}
        </main>
        <footer>
            <nav>
                <ul>
                    <li><a href="https://github.com/guayom" target="_blank">Github</a></li>
                    <li><a href="https://www.linkedin.com/in/guayomena/" target="_blank">LinkedIn</a></li>
                </ul>
            </nav>
        </footer>
        <script>
            const menuItems = document.querySelectorAll('nav#main-nav ul li a');
            menuItems.forEach(item => {
                item.addEventListener('click', async (e) => {
                    e.preventDefault();
                    if (!document.startViewTransition) {
                        console.log('startViewTransition is not supported.');
                        return;
                    } else {
                        console.log('Transition started.');
                        const activeItem = document.querySelector('.active');
                        if (activeItem) {
                            activeItem.classList.add('leaving');
                            activeItem.classList.remove('active');
                            item.classList.add('entering');
                        }
                    }
                    // Start transition with the View Transitions API.
                    const transition = document.startViewTransition(() => {});
                    await transition.finished;
                    window.location.href = item.href;
                    console.log('startViewTransition finished.');
                });
            });
            window.addEventListener('DOMContentLoaded', (event) => { // Get the current URL's query parameters
                let urlParams = new URLSearchParams(window.location.search);
                // If there are any query parameters
                if (urlParams.toString()) { // Get all the links in the main nav
                    let navLinks = document.querySelectorAll('#main-nav>ul>li>a');
                    // For each link
                    navLinks.forEach(link => { // Create a new URL object from the link's href
                        let url = new URL(link.href);
                        // For each query parameter
                        for (let [key, value] of urlParams.entries()) { // Add the query parameter to the link's href
                            url.searchParams.set(key, value);
                        }
                        // Update the link's href
                        link.href = url.toString();
                    });
                }
            });
        </script>
    </body>
</html>